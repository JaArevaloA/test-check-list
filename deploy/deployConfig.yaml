apiVersion: v1
kind: Template
labels:
  template: sodimac-infinity
  app.openshift.io/runtime: angularjs
metadata:
  annotations:
    description: Infinity for Sodimac.
    openshift.io/display-name: Sodimac Development with netcore
    openshift.io/provider-display-name: Sodimac.
    tags: sspa
    version: "1"
  name: sodimac-infinity
  namespace: {{Openshift.Project}}
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        app.openshift.io/vcs-ref: {{Openshift.Branch}}
        app.openshift.io/vcs-uri: {{Openshift.Repository}}
      generation: 3
      labels:
        app: {{Openshift.ServiceName}}
        app.kubernetes.io/component: {{Openshift.ServiceName}}
        app.kubernetes.io/instance: {{Openshift.ServiceName}}
        app.kubernetes.io/part-of: {{Openshift.Application}}
      name: {{Openshift.ServiceName}}
      namespace: {{Openshift.Project}}
    spec:
      replicas: {{Openshift.PodsCount}}
      selector:
        app: {{Openshift.ServiceName}}
        deploymentconfig: {{Openshift.ServiceName}}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 120
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: {{Openshift.ServiceName}}
            deploymentconfig: {{Openshift.ServiceName}}
        spec:
          containers:
            - image: image-registry.openshift-image-registry.svc:5000/{{Openshift.Project}}/{{Openshift.ServiceName}}:{{Build.BuildId}}
              imagePullPolicy: Always
              name: {{Openshift.ServiceName}}
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        app.openshift.io/vcs-ref: {{Openshift.Branch}}
        app.openshift.io/vcs-uri: {{Openshift.Repository}}
      labels:
        app: {{Openshift.ServiceName}}
        app.kubernetes.io/component: {{Openshift.ServiceName}}
        app.kubernetes.io/instance: {{Openshift.ServiceName}}
        app.kubernetes.io/part-of: {{Openshift.Application}}
      name: {{Openshift.ServiceName}}
      namespace: {{Openshift.Project}}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: {{Openshift.ServiceName}}
        deploymentconfig: {{Openshift.ServiceName}}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Route
    metadata:
      name: {{Openshift.ServiceName}}
      namespace: {{Openshift.Project}}
    spec:
      host: {{Openshift.ServiceName}}-{{Openshift.Project}}.apps.{{Openshift.Cluster}}.corp
      to:
        kind: Service
        name: {{Openshift.ServiceName}}
        weight: 100
      port:
        targetPort: 8080-tcp
      tls:
        termination: {{Openshift.Termination}}
        insecureEdgeTerminationPolicy: {{Openshift.TerminationPolicy}}
      wildcardPolicy: None